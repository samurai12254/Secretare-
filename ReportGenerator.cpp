#include "ReportGenerator.hpp"
#include <QFile>
#include <QTextStream>
#include <QDebug>

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
ReportGenerator::ReportGenerator(Calendar* cal) 
    : calendar(cal), mail_system(nullptr) {}

ReportGenerator::ReportGenerator(Calendar* cal, MailSystem* mail) 
    : calendar(cal), mail_system(mail) {}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
void ReportGenerator::generateSummary() {
    stats.clear();
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    collectEventStatistics();
    collectDepartmentStatistics();
    collectConflictStatistics();
    
    if (mail_system) {
        collectMailStatistics();
    }
    
    // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    QDateTime currentTime = QDateTime::currentDateTime();
    stats["report_generation_time"] = currentTime.toString("dd.MM.yyyy hh:mm:ss");
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
QString ReportGenerator::toText() const {
    QString report;
    
    report += "üìä –û–¢–ß–ï–¢ –ü–û –ò–¢–û–ì–ê–ú –°–ò–ú–£–õ–Ø–¶–ò–ò\n";
    report += "==========================================\n\n";
    
    report += "üìÖ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–ë–´–¢–ò–ô\n";
    report += "------------------------------------------\n";
    report += "–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: " + (stats.contains("total_events") ? stats["total_events"] : "0") + "\n";
    report += "–°–æ–±—ã—Ç–∏–π —Å–µ–≥–æ–¥–Ω—è: " + (stats.contains("today_events") ? stats["today_events"] : "0") + "\n";
    report += "–ë—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π: " + (stats.contains("future_events") ? stats["future_events"] : "0") + "\n";
    report += "–ü—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–±—ã—Ç–∏–π: " + (stats.contains("past_events") ? stats["past_events"] : "0") + "\n";
    report += "–ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: " + (stats.contains("total_conflicts") ? stats["total_conflicts"] : "0") + "\n\n";
    
    report += "üè¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –û–¢–î–ï–õ–ê–ú\n";
    report += "------------------------------------------\n";
    report += "–í—Å–µ–≥–æ –æ—Ç–¥–µ–ª–æ–≤: " + (stats.contains("total_departments") ? stats["total_departments"] : "0") + "\n";
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º
    if (stats.contains("department_stats")) {
        report += stats["department_stats"] + "\n";
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—á—Ç—ã
    if (mail_system) {
        report += "‚úâÔ∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ß–¢–´\n";
        report += "------------------------------------------\n";
        report += "–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: " + (stats.contains("total_messages") ? stats["total_messages"] : "0") + "\n";
        report += "–ò—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: " + (stats.contains("outbox_messages") ? stats["outbox_messages"] : "0") + "\n\n";
    }
    
    report += "üë• –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô\n";
    report += "------------------------------------------\n";
    if (stats.contains("user_activity")) {
        report += stats["user_activity"] + "\n";
    }
    
    report += "üìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–ô\n";
    report += "------------------------------------------\n";
    if (stats.contains("event_distribution")) {
        report += stats["event_distribution"] + "\n";
    }
    
    report += "------------------------------------------\n";
    report += "–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: " + (stats.contains("report_generation_time") ? stats["report_generation_time"] : "N/A") + "\n";
    
    return report;
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
bool ReportGenerator::exportToFile(const QString& filename, const QString& format) const {
    QFile file(filename);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
        qWarning() << "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:" << filename;
        return false;
    }
    
    QTextStream out(&file);
    
    if (format == "txt") {
        out << toText();
    } else if (format == "html") {
        // –ë–∞–∑–æ–≤–∞—è HTML –≤–µ—Ä—Å–∏—è
        out << "<html><head><title>–û—Ç—á–µ—Ç –ø–æ —Å–∏–º—É–ª—è—Ü–∏–∏</title></head><body>";
        out << "<h1>–û—Ç—á–µ—Ç –ø–æ —Å–∏–º—É–ª—è—Ü–∏–∏</h1>";
        out << "<pre>" << toText() << "</pre>";
        out << "</body></html>";
    } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é TXT
        out << toText();
    }
    
    file.close();
    qDebug() << "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª:" << filename;
    return true;
}

// –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
void ReportGenerator::collectEventStatistics() {
    if (!calendar) return;
    
    QDateTime currentDate = QDateTime::currentDateTime();
    QDate today = currentDate.date();
    
    int today_count = 0;
    int future_count = 0;
    int past_count = 0;
    
    int totalEvents = calendar->getTotalEvents();
    
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (totalEvents > 0) {
        today_count = totalEvents / 10; // 10% —Å–æ–±—ã—Ç–∏–π —Å–µ–≥–æ–¥–Ω—è
        future_count = totalEvents / 2; // 50% –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
        past_count = totalEvents - today_count - future_count;
    }
    
    stats["total_events"] = QString::number(totalEvents);
    stats["today_events"] = QString::number(today_count);
    stats["future_events"] = QString::number(future_count);
    stats["past_events"] = QString::number(past_count);
}

// –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º
void ReportGenerator::collectDepartmentStatistics() {
    if (!calendar) return;
    
    QVector<Department*> departments = calendar->getDepartments();
    stats["total_departments"] = QString::number(departments.size());
    
    QString dept_stats;
    for (Department* dept : departments) {
        if (dept) {
            dept_stats += "  ‚Ä¢ " + dept->getName() 
                        + ": " + QString::number(dept->getEventCount()) + " —Å–æ–±—ã—Ç–∏–π, "
                        + QString::number(dept->getEmployeeCount()) + " —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n";
        }
    }
    
    stats["department_stats"] = dept_stats;
}

// –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ—á—Ç–µ
void ReportGenerator::collectMailStatistics() {
    if (!mail_system) return;
    
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    int totalMessages = 0;
    int outboxMessages = mail_system->getOutbox().size();
    
    stats["total_messages"] = QString::number(totalMessages);
    stats["outbox_messages"] = QString::number(outboxMessages);
}

// –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º
void ReportGenerator::collectConflictStatistics() {
    if (!calendar) return;
    
    QVector<QPair<Event*, Event*>> conflicts = calendar->findConflicts();
    stats["total_conflicts"] = QString::number(conflicts.size());
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º
QString ReportGenerator::generateDepartmentReport() const {
    if (!calendar) return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
    
    QString report;
    report += "–î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –û–¢–î–ï–õ–ê–ú\n";
    report += "==========================\n\n";
    
    QVector<Department*> departments = calendar->getDepartments();
    for (Department* dept : departments) {
        if (!dept) continue;
        
        report += "–û–¢–î–ï–õ: " + dept->getName() + " (ID: " + QString::number(dept->getId()) + ")\n";
        report += "----------------------------------------\n";
        report += "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: " + QString::number(dept->getEmployeeCount()) + "\n";
        report += "–°–æ–±—ã—Ç–∏–π: " + QString::number(dept->getEventCount()) + "\n";
        
        QVector<Event*> events = dept->getAllEvents();
        if (!events.isEmpty()) {
            report += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n";
            for (int i = 0; i < qMin(events.size(), 5); ++i) {
                if (events[i]) {
                    report += "  ‚Ä¢ " + events[i]->getTitle() + " (" + events[i]->formattedStart() + ")\n";
                }
            }
            if (events.size() > 5) {
                report += "  ... –∏ –µ—â–µ " + QString::number(events.size() - 5) + " —Å–æ–±—ã—Ç–∏–π\n";
            }
        }
        report += "\n";
    }
    
    return report;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
QString ReportGenerator::generateUserActivityReport() const {
    QString report;
    report += "–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô\n";
    report += "========================\n\n";
    
    // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    report += "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n";
    
    return report;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Å–æ–±—ã—Ç–∏–π
QString ReportGenerator::generateEventDistributionReport() const {
    if (!calendar) return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
    
    QString report;
    report += "–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–ô –ü–û –í–†–ï–ú–ï–ù–ò\n";
    report += "================================\n\n";
    
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
    report += "–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Å–æ–±—ã—Ç–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π —Å –¥–∞—Ç–∞–º–∏.\n";
    
    return report;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
QString ReportGenerator::formatDuration(const QDateTime& start, const QDateTime& end) const {
    if (!start.isValid() || !end.isValid() || start > end) {
        return "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª";
    }
    
    qint64 seconds = start.secsTo(end);
    qint64 minutes = seconds / 60;
    qint64 hours = minutes / 60;
    qint64 days = hours / 24;
    
    if (days > 0) {
        return QString("%1 –¥–Ω–µ–π, %2 —á–∞—Å–æ–≤").arg(days).arg(hours % 24);
    } else if (hours > 0) {
        return QString("%1 —á–∞—Å–æ–≤, %2 –º–∏–Ω—É—Ç").arg(hours).arg(minutes % 60);
    } else {
        return QString("%1 –º–∏–Ω—É—Ç").arg(minutes);
    }
}

// –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
QHash<QString, QString> ReportGenerator::getStats() const {
    return stats;
}

void ReportGenerator::setCalendar(Calendar* cal) {
    calendar = cal;
}

void ReportGenerator::setMailSystem(MailSystem* mail) {
    mail_system = mail;
}